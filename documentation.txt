4.1. Specification. Imagine you work for a small Irish software company that has won the
tender to deliver a fuel management software solution to a large Irish Airline. The airline is
entering the European air freight cargo business and wants a software tool to manage their
fuel purchasing strategy. Each week, an aircraft will fly up to six trips. The airplane will
start and end in the same home airport each week and can optionally visit one other airport
twice. The company has a number of different aircrafts that have different fuel capacities
and the cost of fuel varies from airport to airport. Given a list of 5 airports (including to
the home airport)


Project Description
The goal to archive in this project is to create coftware solution for small airline cargo company.
My program works with command line interface and is able to calculate best route for up to 5 landing points trip.

Project assumptions say 1 litre of petrol cost 1 euro in eurozone area and 1 litre of petrol cost 1 local currency outside eurozone (for example 1 pound (1.4euro) in England and 1 zloty in Poland (0.25). This assumptions leads to strange results in petrol price calculation in airports placed in weak-currency countries.  
if one million Belarussian Rubles cost 6.29 euro that means
20 thousand liters of petrol (full tank of 737) cost 1.24 euro

My application has few main classes and methods:
Airport:
	__airport_array = []  # private airport array
	airport_dict = {}     # public airport array

	def getAirportLatitude(self, airPortCode):	# returns airport latitude
	def getAirporttLongtitude(self, airPortCode):	# returns airport longtitude
	def getAirportName(self, airPortCode):	# returns airport full name
	def getAirportCountry(self, airPortCode):	# returns country name from airport record
	def showAirportTable(self):	# show currency table


Country
	__countries_array = [] # private array
	countries_dict_by_currency = {} # public dict
	countries_dict_by_name = {} # public dict
	def getCountryDict(self):  # returns whole dictionary of countries indexed by currency code
	def showCountryTable(self):  # show countries table


Planes
  __planes_array = []
  __planes_objects = []
  def showPlanesTable(self):  # shows all planes inside nice table
  def showAvailablePlanes(self, maxRange):  # shows available planes for maxRange


class Aircraft():
	def getCode(self):    # returns aircraft code
    def getType(self):    # returns type code
    def getUnits(self):    # returns unit for aircraft
    def getManufacturer(self):    # returns aircraft's manufacturer
    def getRangeMile(self):    # returns range (in mile units) for plane
    def getRangeKm(self):    # returns range (in km units) for plane


class Aircraft():




CurrencyRate - keeps
myIoLibrary
App



1000000*6.29E-05

two routes:
- cheapest route 
- shortest route


